// Code generated by protoc-gen-go.
// source: golpje.proto
// DO NOT EDIT!

/*
Package golpje is a generated protocol buffer package.

It is generated from these files:
	golpje.proto

It has these top-level messages:
	Empty
	ProtoShow
	ProtoEvent
	ProtoEpisode
	ProtoEvents
	EventRequest
	ProtoShows
	ProtoEpisodes
	ShowRequest
	AddShowResponse
	EpisodeRequest
	AddEpisodeResponse
*/
package golpje

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ProtoShow struct {
	ID       string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Regexp   string `protobuf:"bytes,3,opt,name=Regexp" json:"Regexp,omitempty"`
	Active   bool   `protobuf:"varint,4,opt,name=Active" json:"Active,omitempty"`
	Seasonal bool   `protobuf:"varint,5,opt,name=Seasonal" json:"Seasonal,omitempty"`
	Minimal  int64  `protobuf:"varint,6,opt,name=Minimal" json:"Minimal,omitempty"`
}

func (m *ProtoShow) Reset()                    { *m = ProtoShow{} }
func (m *ProtoShow) String() string            { return proto.CompactTextString(m) }
func (*ProtoShow) ProtoMessage()               {}
func (*ProtoShow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProtoShow) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ProtoShow) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProtoShow) GetRegexp() string {
	if m != nil {
		return m.Regexp
	}
	return ""
}

func (m *ProtoShow) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *ProtoShow) GetSeasonal() bool {
	if m != nil {
		return m.Seasonal
	}
	return false
}

func (m *ProtoShow) GetMinimal() int64 {
	if m != nil {
		return m.Minimal
	}
	return 0
}

type ProtoEvent struct {
	ID        string   `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Timestamp int64    `protobuf:"varint,2,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Related   []string `protobuf:"bytes,3,rep,name=related" json:"related,omitempty"`
	Data      string   `protobuf:"bytes,4,opt,name=Data" json:"Data,omitempty"`
}

func (m *ProtoEvent) Reset()                    { *m = ProtoEvent{} }
func (m *ProtoEvent) String() string            { return proto.CompactTextString(m) }
func (*ProtoEvent) ProtoMessage()               {}
func (*ProtoEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProtoEvent) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ProtoEvent) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ProtoEvent) GetRelated() []string {
	if m != nil {
		return m.Related
	}
	return nil
}

func (m *ProtoEvent) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ProtoEpisode struct {
	ID          string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty"`
	Showid      string `protobuf:"bytes,3,opt,name=Showid" json:"Showid,omitempty"`
	Added       int64  `protobuf:"varint,4,opt,name=Added" json:"Added,omitempty"`
	Magnetlink  string `protobuf:"bytes,5,opt,name=Magnetlink" json:"Magnetlink,omitempty"`
	Episodeid   string `protobuf:"bytes,6,opt,name=Episodeid" json:"Episodeid,omitempty"`
	Downloaded  bool   `protobuf:"varint,7,opt,name=Downloaded" json:"Downloaded,omitempty"`
	Downloading bool   `protobuf:"varint,8,opt,name=Downloading" json:"Downloading,omitempty"`
}

func (m *ProtoEpisode) Reset()                    { *m = ProtoEpisode{} }
func (m *ProtoEpisode) String() string            { return proto.CompactTextString(m) }
func (*ProtoEpisode) ProtoMessage()               {}
func (*ProtoEpisode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ProtoEpisode) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ProtoEpisode) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ProtoEpisode) GetShowid() string {
	if m != nil {
		return m.Showid
	}
	return ""
}

func (m *ProtoEpisode) GetAdded() int64 {
	if m != nil {
		return m.Added
	}
	return 0
}

func (m *ProtoEpisode) GetMagnetlink() string {
	if m != nil {
		return m.Magnetlink
	}
	return ""
}

func (m *ProtoEpisode) GetEpisodeid() string {
	if m != nil {
		return m.Episodeid
	}
	return ""
}

func (m *ProtoEpisode) GetDownloaded() bool {
	if m != nil {
		return m.Downloaded
	}
	return false
}

func (m *ProtoEpisode) GetDownloading() bool {
	if m != nil {
		return m.Downloading
	}
	return false
}

type ProtoEvents struct {
	Events []*ProtoEvent `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *ProtoEvents) Reset()                    { *m = ProtoEvents{} }
func (m *ProtoEvents) String() string            { return proto.CompactTextString(m) }
func (*ProtoEvents) ProtoMessage()               {}
func (*ProtoEvents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ProtoEvents) GetEvents() []*ProtoEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type EventRequest struct {
	All   bool  `protobuf:"varint,1,opt,name=All" json:"All,omitempty"`
	Since int64 `protobuf:"varint,2,opt,name=Since" json:"Since,omitempty"`
}

func (m *EventRequest) Reset()                    { *m = EventRequest{} }
func (m *EventRequest) String() string            { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()               {}
func (*EventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EventRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *EventRequest) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

type ProtoShows struct {
	Shows []*ProtoShow `protobuf:"bytes,1,rep,name=Shows" json:"Shows,omitempty"`
}

func (m *ProtoShows) Reset()                    { *m = ProtoShows{} }
func (m *ProtoShows) String() string            { return proto.CompactTextString(m) }
func (*ProtoShows) ProtoMessage()               {}
func (*ProtoShows) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ProtoShows) GetShows() []*ProtoShow {
	if m != nil {
		return m.Shows
	}
	return nil
}

type ProtoEpisodes struct {
	Episodes []*ProtoEpisode `protobuf:"bytes,1,rep,name=Episodes" json:"Episodes,omitempty"`
}

func (m *ProtoEpisodes) Reset()                    { *m = ProtoEpisodes{} }
func (m *ProtoEpisodes) String() string            { return proto.CompactTextString(m) }
func (*ProtoEpisodes) ProtoMessage()               {}
func (*ProtoEpisodes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ProtoEpisodes) GetEpisodes() []*ProtoEpisode {
	if m != nil {
		return m.Episodes
	}
	return nil
}

type ShowRequest struct {
	Onlyactive bool   `protobuf:"varint,1,opt,name=Onlyactive" json:"Onlyactive,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *ShowRequest) Reset()                    { *m = ShowRequest{} }
func (m *ShowRequest) String() string            { return proto.CompactTextString(m) }
func (*ShowRequest) ProtoMessage()               {}
func (*ShowRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ShowRequest) GetOnlyactive() bool {
	if m != nil {
		return m.Onlyactive
	}
	return false
}

func (m *ShowRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AddShowResponse struct {
	Show    *ProtoShow `protobuf:"bytes,1,opt,name=Show" json:"Show,omitempty"`
	Success bool       `protobuf:"varint,2,opt,name=Success" json:"Success,omitempty"`
	Error   string     `protobuf:"bytes,3,opt,name=Error" json:"Error,omitempty"`
}

func (m *AddShowResponse) Reset()                    { *m = AddShowResponse{} }
func (m *AddShowResponse) String() string            { return proto.CompactTextString(m) }
func (*AddShowResponse) ProtoMessage()               {}
func (*AddShowResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AddShowResponse) GetShow() *ProtoShow {
	if m != nil {
		return m.Show
	}
	return nil
}

func (m *AddShowResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AddShowResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type EpisodeRequest struct {
	Showid string `protobuf:"bytes,1,opt,name=Showid" json:"Showid,omitempty"`
	Season uint32 `protobuf:"varint,2,opt,name=Season" json:"Season,omitempty"`
}

func (m *EpisodeRequest) Reset()                    { *m = EpisodeRequest{} }
func (m *EpisodeRequest) String() string            { return proto.CompactTextString(m) }
func (*EpisodeRequest) ProtoMessage()               {}
func (*EpisodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *EpisodeRequest) GetShowid() string {
	if m != nil {
		return m.Showid
	}
	return ""
}

func (m *EpisodeRequest) GetSeason() uint32 {
	if m != nil {
		return m.Season
	}
	return 0
}

type AddEpisodeResponse struct {
	Episode *ProtoEpisode `protobuf:"bytes,1,opt,name=Episode" json:"Episode,omitempty"`
	Success bool          `protobuf:"varint,2,opt,name=Success" json:"Success,omitempty"`
	Error   string        `protobuf:"bytes,3,opt,name=Error" json:"Error,omitempty"`
}

func (m *AddEpisodeResponse) Reset()                    { *m = AddEpisodeResponse{} }
func (m *AddEpisodeResponse) String() string            { return proto.CompactTextString(m) }
func (*AddEpisodeResponse) ProtoMessage()               {}
func (*AddEpisodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AddEpisodeResponse) GetEpisode() *ProtoEpisode {
	if m != nil {
		return m.Episode
	}
	return nil
}

func (m *AddEpisodeResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AddEpisodeResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "golpje.Empty")
	proto.RegisterType((*ProtoShow)(nil), "golpje.ProtoShow")
	proto.RegisterType((*ProtoEvent)(nil), "golpje.ProtoEvent")
	proto.RegisterType((*ProtoEpisode)(nil), "golpje.ProtoEpisode")
	proto.RegisterType((*ProtoEvents)(nil), "golpje.ProtoEvents")
	proto.RegisterType((*EventRequest)(nil), "golpje.EventRequest")
	proto.RegisterType((*ProtoShows)(nil), "golpje.ProtoShows")
	proto.RegisterType((*ProtoEpisodes)(nil), "golpje.ProtoEpisodes")
	proto.RegisterType((*ShowRequest)(nil), "golpje.ShowRequest")
	proto.RegisterType((*AddShowResponse)(nil), "golpje.AddShowResponse")
	proto.RegisterType((*EpisodeRequest)(nil), "golpje.EpisodeRequest")
	proto.RegisterType((*AddEpisodeResponse)(nil), "golpje.AddEpisodeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Golpje service

type GolpjeClient interface {
	GetEvents(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*ProtoEvents, error)
	GetShows(ctx context.Context, in *ShowRequest, opts ...grpc.CallOption) (*ProtoShows, error)
	AddShow(ctx context.Context, in *ProtoShow, opts ...grpc.CallOption) (*AddShowResponse, error)
	DelShow(ctx context.Context, in *ProtoShow, opts ...grpc.CallOption) (*AddShowResponse, error)
	GetEpisodes(ctx context.Context, in *EpisodeRequest, opts ...grpc.CallOption) (*ProtoEpisodes, error)
	AddEpisode(ctx context.Context, in *ProtoEpisode, opts ...grpc.CallOption) (*AddEpisodeResponse, error)
}

type golpjeClient struct {
	cc *grpc.ClientConn
}

func NewGolpjeClient(cc *grpc.ClientConn) GolpjeClient {
	return &golpjeClient{cc}
}

func (c *golpjeClient) GetEvents(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*ProtoEvents, error) {
	out := new(ProtoEvents)
	err := grpc.Invoke(ctx, "/golpje.Golpje/GetEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *golpjeClient) GetShows(ctx context.Context, in *ShowRequest, opts ...grpc.CallOption) (*ProtoShows, error) {
	out := new(ProtoShows)
	err := grpc.Invoke(ctx, "/golpje.Golpje/GetShows", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *golpjeClient) AddShow(ctx context.Context, in *ProtoShow, opts ...grpc.CallOption) (*AddShowResponse, error) {
	out := new(AddShowResponse)
	err := grpc.Invoke(ctx, "/golpje.Golpje/AddShow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *golpjeClient) DelShow(ctx context.Context, in *ProtoShow, opts ...grpc.CallOption) (*AddShowResponse, error) {
	out := new(AddShowResponse)
	err := grpc.Invoke(ctx, "/golpje.Golpje/DelShow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *golpjeClient) GetEpisodes(ctx context.Context, in *EpisodeRequest, opts ...grpc.CallOption) (*ProtoEpisodes, error) {
	out := new(ProtoEpisodes)
	err := grpc.Invoke(ctx, "/golpje.Golpje/GetEpisodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *golpjeClient) AddEpisode(ctx context.Context, in *ProtoEpisode, opts ...grpc.CallOption) (*AddEpisodeResponse, error) {
	out := new(AddEpisodeResponse)
	err := grpc.Invoke(ctx, "/golpje.Golpje/AddEpisode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Golpje service

type GolpjeServer interface {
	GetEvents(context.Context, *EventRequest) (*ProtoEvents, error)
	GetShows(context.Context, *ShowRequest) (*ProtoShows, error)
	AddShow(context.Context, *ProtoShow) (*AddShowResponse, error)
	DelShow(context.Context, *ProtoShow) (*AddShowResponse, error)
	GetEpisodes(context.Context, *EpisodeRequest) (*ProtoEpisodes, error)
	AddEpisode(context.Context, *ProtoEpisode) (*AddEpisodeResponse, error)
}

func RegisterGolpjeServer(s *grpc.Server, srv GolpjeServer) {
	s.RegisterService(&_Golpje_serviceDesc, srv)
}

func _Golpje_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GolpjeServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/golpje.Golpje/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GolpjeServer).GetEvents(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Golpje_GetShows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GolpjeServer).GetShows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/golpje.Golpje/GetShows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GolpjeServer).GetShows(ctx, req.(*ShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Golpje_AddShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GolpjeServer).AddShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/golpje.Golpje/AddShow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GolpjeServer).AddShow(ctx, req.(*ProtoShow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Golpje_DelShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoShow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GolpjeServer).DelShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/golpje.Golpje/DelShow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GolpjeServer).DelShow(ctx, req.(*ProtoShow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Golpje_GetEpisodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EpisodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GolpjeServer).GetEpisodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/golpje.Golpje/GetEpisodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GolpjeServer).GetEpisodes(ctx, req.(*EpisodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Golpje_AddEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoEpisode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GolpjeServer).AddEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/golpje.Golpje/AddEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GolpjeServer).AddEpisode(ctx, req.(*ProtoEpisode))
	}
	return interceptor(ctx, in, info, handler)
}

var _Golpje_serviceDesc = grpc.ServiceDesc{
	ServiceName: "golpje.Golpje",
	HandlerType: (*GolpjeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvents",
			Handler:    _Golpje_GetEvents_Handler,
		},
		{
			MethodName: "GetShows",
			Handler:    _Golpje_GetShows_Handler,
		},
		{
			MethodName: "AddShow",
			Handler:    _Golpje_AddShow_Handler,
		},
		{
			MethodName: "DelShow",
			Handler:    _Golpje_DelShow_Handler,
		},
		{
			MethodName: "GetEpisodes",
			Handler:    _Golpje_GetEpisodes_Handler,
		},
		{
			MethodName: "AddEpisode",
			Handler:    _Golpje_AddEpisode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golpje.proto",
}

func init() { proto.RegisterFile("golpje.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 629 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0xe3, 0xc4, 0xb1, 0x6f, 0xd2, 0x7e, 0x1f, 0x43, 0x29, 0x96, 0x85, 0x2a, 0x6b, 0x24,
	0x44, 0xc4, 0x22, 0x42, 0x45, 0xe5, 0x67, 0x83, 0x6a, 0x29, 0x51, 0xd4, 0x45, 0x01, 0x4d, 0xfa,
	0x02, 0x26, 0x1e, 0x25, 0x06, 0xc7, 0x36, 0x99, 0x69, 0x4b, 0x1f, 0x84, 0x17, 0x64, 0xcf, 0x3b,
	0xa0, 0xb9, 0x33, 0xfe, 0x49, 0x93, 0x0d, 0xec, 0xe6, 0x9c, 0xb9, 0x73, 0x7f, 0xce, 0x3d, 0x36,
	0x0c, 0x97, 0x45, 0x56, 0x7e, 0xe5, 0xe3, 0x72, 0x53, 0xc8, 0x82, 0x38, 0x1a, 0xd1, 0x3e, 0xf4,
	0xa6, 0xeb, 0x52, 0xde, 0xd3, 0x9f, 0x16, 0x78, 0x9f, 0xd5, 0xd5, 0x7c, 0x55, 0xdc, 0x91, 0x23,
	0xe8, 0x5c, 0x4e, 0x7c, 0x2b, 0xb4, 0x46, 0x1e, 0xeb, 0x5c, 0x4e, 0x08, 0x81, 0xee, 0xc7, 0x78,
	0xcd, 0xfd, 0x0e, 0x32, 0x78, 0x26, 0x27, 0xe0, 0x30, 0xbe, 0xe4, 0x3f, 0x4a, 0xdf, 0x46, 0xd6,
	0x20, 0xc5, 0x47, 0x0b, 0x99, 0xde, 0x72, 0xbf, 0x1b, 0x5a, 0x23, 0x97, 0x19, 0x44, 0x02, 0x70,
	0xe7, 0x3c, 0x16, 0x45, 0x1e, 0x67, 0x7e, 0x0f, 0x6f, 0x6a, 0x4c, 0x7c, 0xe8, 0x5f, 0xa5, 0x79,
	0xba, 0x8e, 0x33, 0xdf, 0x09, 0xad, 0x91, 0xcd, 0x2a, 0x48, 0x57, 0x00, 0xd8, 0xd6, 0xf4, 0x96,
	0xe7, 0x72, 0xa7, 0xaf, 0x67, 0xe0, 0x5d, 0xa7, 0x6b, 0x2e, 0x64, 0xbc, 0x2e, 0xb1, 0x39, 0x9b,
	0x35, 0x84, 0xca, 0xba, 0xe1, 0x59, 0x2c, 0x79, 0xe2, 0xdb, 0xa1, 0x3d, 0xf2, 0x58, 0x05, 0xd5,
	0x3c, 0x93, 0x58, 0xc6, 0xd8, 0xa1, 0xc7, 0xf0, 0x4c, 0x7f, 0x59, 0x30, 0xd4, 0xa5, 0xca, 0x54,
	0x14, 0x09, 0xdf, 0x29, 0x76, 0x0c, 0xbd, 0xeb, 0x54, 0x66, 0x95, 0x0a, 0x1a, 0xa8, 0x71, 0x95,
	0x64, 0x69, 0x52, 0xc9, 0xa0, 0x91, 0x8a, 0x8e, 0x92, 0x84, 0x27, 0x58, 0xc3, 0x66, 0x1a, 0x90,
	0x53, 0x80, 0xab, 0x78, 0x99, 0x73, 0x99, 0xa5, 0xf9, 0x37, 0x94, 0xc1, 0x63, 0x2d, 0x46, 0x0d,
	0x64, 0xca, 0xa7, 0x09, 0x4a, 0xe1, 0xb1, 0x86, 0x50, 0xaf, 0x27, 0xc5, 0x5d, 0x9e, 0x15, 0xb1,
	0x4a, 0xdc, 0x47, 0x11, 0x5b, 0x0c, 0x09, 0x61, 0x50, 0xa1, 0x34, 0x5f, 0xfa, 0x2e, 0x06, 0xb4,
	0x29, 0xfa, 0x1e, 0x06, 0x8d, 0x9c, 0x82, 0xbc, 0x04, 0x47, 0x9f, 0x7c, 0x2b, 0xb4, 0x47, 0x83,
	0x33, 0x32, 0x36, 0x2e, 0x69, 0x82, 0x98, 0x89, 0xa0, 0x6f, 0x60, 0xa8, 0x09, 0xfe, 0xfd, 0x86,
	0x0b, 0x49, 0xfe, 0x07, 0x3b, 0xca, 0x32, 0xd4, 0xc7, 0x65, 0xea, 0xa8, 0x46, 0x9e, 0xa7, 0xf9,
	0x82, 0x9b, 0x4d, 0x68, 0x40, 0xcf, 0xcd, 0x06, 0x95, 0x2e, 0x82, 0xbc, 0x80, 0x1e, 0x1e, 0x4c,
	0xc1, 0x47, 0x5b, 0x05, 0xd5, 0x0d, 0xd3, 0xf7, 0x34, 0x82, 0xc3, 0xf6, 0x36, 0x04, 0x79, 0x05,
	0x6e, 0x75, 0x36, 0x8f, 0x8f, 0xb7, 0xbb, 0xd5, 0x97, 0xac, 0x8e, 0xa2, 0x11, 0x0c, 0x30, 0xa3,
	0x69, 0xf8, 0x14, 0xe0, 0x53, 0x9e, 0xdd, 0xc7, 0xda, 0x9c, 0xba, 0xef, 0x16, 0xb3, 0xcf, 0xe4,
	0x74, 0x05, 0xff, 0x45, 0x49, 0xa2, 0xb3, 0x88, 0xb2, 0xc8, 0x05, 0x27, 0xcf, 0xa1, 0xab, 0x30,
	0x26, 0xd8, 0x3b, 0x00, 0x5e, 0x2b, 0xf3, 0xcd, 0x6f, 0x16, 0x0b, 0x2e, 0x04, 0x26, 0x74, 0x59,
	0x05, 0x95, 0x4c, 0xd3, 0xcd, 0xa6, 0xd8, 0x18, 0xc3, 0x68, 0x40, 0x2f, 0xe0, 0xa8, 0x9a, 0xc0,
	0xf4, 0xdb, 0x38, 0xcb, 0xda, 0x72, 0x96, 0xe2, 0xf1, 0xc3, 0xc1, 0xc4, 0x87, 0xcc, 0x20, 0x2a,
	0x81, 0x44, 0x49, 0x52, 0x27, 0x31, 0xed, 0x8e, 0xa1, 0x6f, 0x28, 0xd3, 0xf1, 0x7e, 0xd5, 0xaa,
	0xa0, 0xbf, 0xed, 0xfb, 0xec, 0x77, 0x07, 0x9c, 0x19, 0x26, 0x24, 0xef, 0xc0, 0x9b, 0x71, 0x69,
	0xac, 0x55, 0x97, 0x69, 0x9b, 0x26, 0x78, 0xbc, 0x6b, 0x30, 0x41, 0x0f, 0xc8, 0x39, 0xb8, 0x33,
	0x2e, 0xb5, 0x43, 0xea, 0x90, 0xd6, 0xee, 0x02, 0xb2, 0x23, 0xb3, 0x7a, 0xf6, 0x16, 0xfa, 0x66,
	0x3b, 0x64, 0x77, 0x0f, 0xc1, 0xd3, 0x8a, 0x7a, 0xb0, 0x41, 0xfd, 0x70, 0xc2, 0xb3, 0x7f, 0x78,
	0xf8, 0x01, 0x06, 0x6a, 0xc4, 0xca, 0x93, 0x27, 0xf5, 0x90, 0x5b, 0xab, 0x0b, 0x9e, 0xec, 0xd3,
	0x58, 0x75, 0x7c, 0x01, 0xd0, 0xec, 0x88, 0xec, 0x5d, 0x45, 0x10, 0xb4, 0xca, 0x3f, 0xd8, 0x26,
	0x3d, 0xf8, 0xe2, 0xe0, 0x0f, 0xfc, 0xf5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x91, 0x75,
	0x2e, 0xd0, 0x05, 0x00, 0x00,
}
