// Code generated by protoc-gen-go.
// source: golpje.proto
// DO NOT EDIT!

/*
Package golpje is a generated protocol buffer package.

It is generated from these files:
	golpje.proto

It has these top-level messages:
	Empty
	Show
	Event
	Episode
	Events
	EventRequest
	Shows
	Episodes
	ShowRequest
	AddShowResponse
	EpisodeRequest
	AddEpisodeResponse
*/
package golpje

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Show struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	// @inject_tag: storm:"unique"
	Name   string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty" storm:"unique"`
	Regexp string `protobuf:"bytes,3,opt,name=Regexp" json:"Regexp,omitempty"`
	// @inject_tag: storm:"index"
	Active        bool   `protobuf:"varint,4,opt,name=Active" json:"Active,omitempty" storm:"index"`
	Episodeidtype string `protobuf:"bytes,5,opt,name=Episodeidtype" json:"Episodeidtype,omitempty"`
	Minimal       uint32 `protobuf:"varint,6,opt,name=Minimal" json:"Minimal,omitempty"`
}

func (m *Show) Reset()                    { *m = Show{} }
func (m *Show) String() string            { return proto.CompactTextString(m) }
func (*Show) ProtoMessage()               {}
func (*Show) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Show) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Show) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Show) GetRegexp() string {
	if m != nil {
		return m.Regexp
	}
	return ""
}

func (m *Show) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Show) GetEpisodeidtype() string {
	if m != nil {
		return m.Episodeidtype
	}
	return ""
}

func (m *Show) GetMinimal() uint32 {
	if m != nil {
		return m.Minimal
	}
	return 0
}

type Event struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	// @inject_tag: storm:"index"
	Timestamp int64    `protobuf:"varint,2,opt,name=Timestamp" json:"Timestamp,omitempty" storm:"index"`
	Related   []string `protobuf:"bytes,3,rep,name=related" json:"related,omitempty"`
	Data      string   `protobuf:"bytes,4,opt,name=Data" json:"Data,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Event) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Event) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Event) GetRelated() []string {
	if m != nil {
		return m.Related
	}
	return nil
}

func (m *Event) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Episode struct {
	ID    string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty"`
	// @inject_tag: storm:"index"
	Showid string `protobuf:"bytes,3,opt,name=Showid" json:"Showid,omitempty" storm:"index"`
	// @inject_tag: storm:"index"
	Added      int64  `protobuf:"varint,4,opt,name=Added" json:"Added,omitempty" storm:"index"`
	Magnetlink string `protobuf:"bytes,5,opt,name=Magnetlink" json:"Magnetlink,omitempty"`
	Episodeid  string `protobuf:"bytes,6,opt,name=Episodeid" json:"Episodeid,omitempty"`
	// @inject_tag: storm:"index"
	Downloaded bool `protobuf:"varint,7,opt,name=Downloaded" json:"Downloaded,omitempty" storm:"index"`
	// @inject_tag: storm:"index"
	Downloading bool `protobuf:"varint,8,opt,name=Downloading" json:"Downloading,omitempty" storm:"index"`
}

func (m *Episode) Reset()                    { *m = Episode{} }
func (m *Episode) String() string            { return proto.CompactTextString(m) }
func (*Episode) ProtoMessage()               {}
func (*Episode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Episode) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Episode) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Episode) GetShowid() string {
	if m != nil {
		return m.Showid
	}
	return ""
}

func (m *Episode) GetAdded() int64 {
	if m != nil {
		return m.Added
	}
	return 0
}

func (m *Episode) GetMagnetlink() string {
	if m != nil {
		return m.Magnetlink
	}
	return ""
}

func (m *Episode) GetEpisodeid() string {
	if m != nil {
		return m.Episodeid
	}
	return ""
}

func (m *Episode) GetDownloaded() bool {
	if m != nil {
		return m.Downloaded
	}
	return false
}

func (m *Episode) GetDownloading() bool {
	if m != nil {
		return m.Downloading
	}
	return false
}

type Events struct {
	Events []*Event `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
}

func (m *Events) Reset()                    { *m = Events{} }
func (m *Events) String() string            { return proto.CompactTextString(m) }
func (*Events) ProtoMessage()               {}
func (*Events) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Events) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type EventRequest struct {
	All   bool  `protobuf:"varint,1,opt,name=All" json:"All,omitempty"`
	Since int64 `protobuf:"varint,2,opt,name=Since" json:"Since,omitempty"`
}

func (m *EventRequest) Reset()                    { *m = EventRequest{} }
func (m *EventRequest) String() string            { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()               {}
func (*EventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EventRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *EventRequest) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

type Shows struct {
	Shows []*Show `protobuf:"bytes,1,rep,name=Shows" json:"Shows,omitempty"`
}

func (m *Shows) Reset()                    { *m = Shows{} }
func (m *Shows) String() string            { return proto.CompactTextString(m) }
func (*Shows) ProtoMessage()               {}
func (*Shows) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Shows) GetShows() []*Show {
	if m != nil {
		return m.Shows
	}
	return nil
}

type Episodes struct {
	Episodes []*Episode `protobuf:"bytes,1,rep,name=Episodes" json:"Episodes,omitempty"`
}

func (m *Episodes) Reset()                    { *m = Episodes{} }
func (m *Episodes) String() string            { return proto.CompactTextString(m) }
func (*Episodes) ProtoMessage()               {}
func (*Episodes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Episodes) GetEpisodes() []*Episode {
	if m != nil {
		return m.Episodes
	}
	return nil
}

type ShowRequest struct {
	Onlyactive bool   `protobuf:"varint,1,opt,name=Onlyactive" json:"Onlyactive,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *ShowRequest) Reset()                    { *m = ShowRequest{} }
func (m *ShowRequest) String() string            { return proto.CompactTextString(m) }
func (*ShowRequest) ProtoMessage()               {}
func (*ShowRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ShowRequest) GetOnlyactive() bool {
	if m != nil {
		return m.Onlyactive
	}
	return false
}

func (m *ShowRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AddShowResponse struct {
	Show    *Show  `protobuf:"bytes,1,opt,name=Show" json:"Show,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=Success" json:"Success,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=Error" json:"Error,omitempty"`
}

func (m *AddShowResponse) Reset()                    { *m = AddShowResponse{} }
func (m *AddShowResponse) String() string            { return proto.CompactTextString(m) }
func (*AddShowResponse) ProtoMessage()               {}
func (*AddShowResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AddShowResponse) GetShow() *Show {
	if m != nil {
		return m.Show
	}
	return nil
}

func (m *AddShowResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AddShowResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type EpisodeRequest struct {
	Showid string `protobuf:"bytes,1,opt,name=Showid" json:"Showid,omitempty"`
	Season uint32 `protobuf:"varint,2,opt,name=Season" json:"Season,omitempty"`
}

func (m *EpisodeRequest) Reset()                    { *m = EpisodeRequest{} }
func (m *EpisodeRequest) String() string            { return proto.CompactTextString(m) }
func (*EpisodeRequest) ProtoMessage()               {}
func (*EpisodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *EpisodeRequest) GetShowid() string {
	if m != nil {
		return m.Showid
	}
	return ""
}

func (m *EpisodeRequest) GetSeason() uint32 {
	if m != nil {
		return m.Season
	}
	return 0
}

type AddEpisodeResponse struct {
	Episode *Episode `protobuf:"bytes,1,opt,name=Episode" json:"Episode,omitempty"`
	Success bool     `protobuf:"varint,2,opt,name=Success" json:"Success,omitempty"`
	Error   string   `protobuf:"bytes,3,opt,name=Error" json:"Error,omitempty"`
}

func (m *AddEpisodeResponse) Reset()                    { *m = AddEpisodeResponse{} }
func (m *AddEpisodeResponse) String() string            { return proto.CompactTextString(m) }
func (*AddEpisodeResponse) ProtoMessage()               {}
func (*AddEpisodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AddEpisodeResponse) GetEpisode() *Episode {
	if m != nil {
		return m.Episode
	}
	return nil
}

func (m *AddEpisodeResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AddEpisodeResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "golpje.Empty")
	proto.RegisterType((*Show)(nil), "golpje.Show")
	proto.RegisterType((*Event)(nil), "golpje.Event")
	proto.RegisterType((*Episode)(nil), "golpje.Episode")
	proto.RegisterType((*Events)(nil), "golpje.Events")
	proto.RegisterType((*EventRequest)(nil), "golpje.EventRequest")
	proto.RegisterType((*Shows)(nil), "golpje.Shows")
	proto.RegisterType((*Episodes)(nil), "golpje.Episodes")
	proto.RegisterType((*ShowRequest)(nil), "golpje.ShowRequest")
	proto.RegisterType((*AddShowResponse)(nil), "golpje.AddShowResponse")
	proto.RegisterType((*EpisodeRequest)(nil), "golpje.EpisodeRequest")
	proto.RegisterType((*AddEpisodeResponse)(nil), "golpje.AddEpisodeResponse")
}

func init() { proto.RegisterFile("golpje.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6a, 0xdb, 0x4c,
	0x10, 0x8d, 0x2c, 0x5b, 0x3f, 0xe3, 0x9f, 0x84, 0xfd, 0x42, 0x3e, 0x61, 0x4a, 0x10, 0x4b, 0x0b,
	0x2e, 0x81, 0xb4, 0x38, 0xd0, 0x52, 0x7a, 0x53, 0x81, 0x8d, 0xc9, 0x45, 0x5a, 0x58, 0xe7, 0x05,
	0x54, 0x69, 0x71, 0xd5, 0xca, 0x92, 0xea, 0xdd, 0x24, 0xf5, 0xab, 0xb4, 0xcf, 0xd6, 0x77, 0x29,
	0xfb, 0x27, 0x4b, 0x72, 0x6f, 0x7a, 0x37, 0xe7, 0x68, 0x77, 0xe6, 0xcc, 0xd1, 0x91, 0x60, 0xb4,
	0x29, 0xf3, 0xea, 0x2b, 0xbd, 0xae, 0x76, 0x25, 0x2f, 0x91, 0xa3, 0x10, 0x76, 0x61, 0xb0, 0xdc,
	0x56, 0x7c, 0x8f, 0x7f, 0x5a, 0xd0, 0x5f, 0x7f, 0x29, 0x9f, 0xd0, 0x04, 0x7a, 0xb7, 0x8b, 0xc0,
	0x0a, 0xad, 0x99, 0x4f, 0x7a, 0xb7, 0x0b, 0x84, 0xa0, 0xff, 0x31, 0xde, 0xd2, 0xa0, 0x27, 0x19,
	0x59, 0xa3, 0x0b, 0x70, 0x08, 0xdd, 0xd0, 0x1f, 0x55, 0x60, 0x4b, 0x56, 0x23, 0xc1, 0x47, 0x09,
	0xcf, 0x1e, 0x69, 0xd0, 0x0f, 0xad, 0x99, 0x47, 0x34, 0x42, 0xcf, 0x61, 0xbc, 0xac, 0x32, 0x56,
	0xa6, 0x34, 0x4b, 0xf9, 0xbe, 0xa2, 0xc1, 0x40, 0x5e, 0x6b, 0x93, 0x28, 0x00, 0xf7, 0x2e, 0x2b,
	0xb2, 0x6d, 0x9c, 0x07, 0x4e, 0x68, 0xcd, 0xc6, 0xc4, 0x40, 0x9c, 0xc0, 0x60, 0xf9, 0x48, 0x0b,
	0x7e, 0x24, 0xee, 0x19, 0xf8, 0xf7, 0xd9, 0x96, 0x32, 0x1e, 0x6f, 0x2b, 0xa9, 0xd0, 0x26, 0x07,
	0x42, 0x34, 0xdc, 0xd1, 0x3c, 0xe6, 0x34, 0x0d, 0xec, 0xd0, 0x9e, 0xf9, 0xc4, 0x40, 0xb1, 0xd4,
	0x22, 0xe6, 0xb1, 0x94, 0xe9, 0x13, 0x59, 0xe3, 0xdf, 0x16, 0xb8, 0x5a, 0xd0, 0xd1, 0x9c, 0x73,
	0x18, 0xdc, 0x67, 0x3c, 0x37, 0x2e, 0x28, 0x20, 0xd6, 0x15, 0x96, 0x65, 0xa9, 0xb1, 0x41, 0x21,
	0x71, 0x3a, 0x4a, 0x53, 0x9a, 0xca, 0xf6, 0x36, 0x51, 0x00, 0x5d, 0x02, 0xdc, 0xc5, 0x9b, 0x82,
	0xf2, 0x3c, 0x2b, 0xbe, 0x69, 0x07, 0x1a, 0x8c, 0xd8, 0xa5, 0xf6, 0x43, 0x1a, 0xe0, 0x93, 0x03,
	0x21, 0x6e, 0x2f, 0xca, 0xa7, 0x22, 0x2f, 0x63, 0xd1, 0xd8, 0x95, 0xf6, 0x36, 0x18, 0x14, 0xc2,
	0xd0, 0xa0, 0xac, 0xd8, 0x04, 0x9e, 0x3c, 0xd0, 0xa4, 0xf0, 0x2b, 0x70, 0xa4, 0x89, 0x0c, 0xbd,
	0x30, 0x55, 0x60, 0x85, 0xf6, 0x6c, 0x38, 0x1f, 0x5f, 0xeb, 0x6c, 0x48, 0x96, 0xe8, 0x87, 0xf8,
	0x0d, 0x8c, 0x14, 0x41, 0xbf, 0x3f, 0x50, 0xc6, 0xd1, 0x19, 0xd8, 0x51, 0x9e, 0x4b, 0x57, 0x3c,
	0x22, 0x4a, 0xb1, 0xe8, 0x3a, 0x2b, 0x12, 0xaa, 0xad, 0x57, 0x00, 0x5f, 0xc1, 0x40, 0x18, 0xc1,
	0x10, 0xd6, 0x85, 0x1e, 0x33, 0x32, 0x63, 0x04, 0x49, 0xd4, 0x23, 0xfc, 0x16, 0x3c, 0xbd, 0x24,
	0x43, 0x57, 0x87, 0x5a, 0x5f, 0x39, 0xad, 0x95, 0x29, 0x9e, 0xd4, 0x07, 0x70, 0x04, 0x43, 0xd9,
	0x47, 0x8b, 0xbb, 0x04, 0xf8, 0x54, 0xe4, 0xfb, 0x58, 0xc5, 0x4f, 0x69, 0x6c, 0x30, 0x7f, 0x8b,
	0x31, 0x4e, 0xe0, 0x34, 0x4a, 0x53, 0xd5, 0x85, 0x55, 0x65, 0xc1, 0x28, 0x0a, 0xd5, 0x57, 0x20,
	0x1b, 0x74, 0x15, 0xab, 0xef, 0x23, 0x00, 0x77, 0xfd, 0x90, 0x24, 0x94, 0x31, 0xd9, 0xcb, 0x23,
	0x06, 0x0a, 0x37, 0x96, 0xbb, 0x5d, 0xb9, 0xd3, 0x69, 0x50, 0x00, 0x7f, 0x80, 0x89, 0x11, 0xaf,
	0xa5, 0x1e, 0x62, 0x63, 0xb5, 0x62, 0x23, 0x78, 0x1a, 0xb3, 0xb2, 0x90, 0x8d, 0xc7, 0x44, 0x23,
	0x5c, 0x02, 0x8a, 0xd2, 0xb4, 0x6e, 0xa2, 0x95, 0xbe, 0xac, 0xd3, 0xaa, 0xc5, 0x1e, 0x79, 0x55,
	0xa7, 0xf9, 0x1f, 0x25, 0xcf, 0x7f, 0xf5, 0xc0, 0x59, 0xc9, 0x5e, 0xe8, 0x06, 0xfc, 0x15, 0xe5,
	0x3a, 0x37, 0xe7, 0xed, 0x9c, 0xa8, 0x75, 0xa6, 0x93, 0x16, 0xcb, 0xf0, 0x09, 0x7a, 0x0d, 0xde,
	0x8a, 0x72, 0x95, 0x81, 0xff, 0x5a, 0x16, 0xea, 0x2b, 0xe3, 0x26, 0x29, 0x6e, 0xcc, 0xc1, 0xd5,
	0x6f, 0x02, 0xb5, 0x3c, 0x9f, 0xfe, 0x6f, 0x50, 0xe7, 0x45, 0xe1, 0x13, 0xf4, 0x0e, 0x86, 0x42,
	0x9a, 0x09, 0xcf, 0x45, 0x77, 0x7d, 0x3d, 0xeb, 0xac, 0xc3, 0x8b, 0x71, 0xef, 0x01, 0x0e, 0x8e,
	0xa2, 0xae, 0x71, 0xd3, 0x69, 0x63, 0x68, 0xc7, 0x76, 0x7c, 0xf2, 0xd9, 0x91, 0x7f, 0xd0, 0x9b,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x92, 0x2a, 0x77, 0x65, 0x51, 0x05, 0x00, 0x00,
}
